{"meta":{"title":"魏敬杨的个人网站","subtitle":"学号：08183059","description":"","author":"魏敬杨","url":"wjywjy61.github.io","root":"/"},"posts":[{"tags":[],"title":"Hello World","date":"2019/12/09","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","permalink":"wjywjy61.github.io/2019/12/09/hello-world/","photos":[]},{"tags":[{"name":"学生工作","slug":"学生工作","permalink":"wjywjy61.github.io/tags/%E5%AD%A6%E7%94%9F%E5%B7%A5%E4%BD%9C/"}],"title":"2019年计算机学院学生会学习部办公培训会总结","date":"2019/12/09","text":"2019年学习部办公培训纲要及总结说明今天这场培训会的总体效果还是达到了，即在一定程度上提升对各种工具的使用能力，激发大家对它们进行持续探索的兴趣，明确一些常见的学习部所需要处理的文件的操作流程，使大家有一个对作品（特别是对外发放的作品）提高标准的意识等 但是问题也很明显，我今天所想要讲的东西有些多，有些杂，不太系统化，该重点讲的地方也没讲深入，加之今天用于远程操控的工具的一些小瑕疵，大家听起来可能效果不是特别好。 在这里，我将今天提到的（或应该提的）一些简单的列了列，大家可以没事儿的时候倒腾倒腾，希望能够帮到大家。 常用通用快捷键（推荐的）Ctrl+A、C、X、V Z、Y S（save）、O(open)、N(new)、W 鼠标左键 F(find) P(print) B(bold)、I、U 其他win+shift+S (目前我认为体验最好的截屏快捷操作) ctrl+shift+esc ctrl+鼠标滑轮 alt+tab shift+delete win+L（锁屏） win+D(桌面) 触摸板 uu操作 win+; 参考博客Word常用操作页眉、页脚、边框、分页符、页码、页边距 目录 自动编号 格式刷 字体(C:\\Windows\\Fonts,字加) word转pdf 邮件合并（奖状制作） word里边的图片操作（特别是背景图和需要变成半通明的logo等） ······ Excel常用操作格式规范：标题、说明 页面布局视图（打印必备） 粘贴时格式的控制 各种替换操作 排序、筛选 表格设计（主要是要让表格信息一目了然，显得严谨工整） 页眉页脚、页码、页边距 常用公式、函数：IF()，Search()，Lookup()，Left()，Right()等 字符串合并：使用&amp;符号 excel转图片：先转pdf，再用acrobat等工具转为图片/选中单元格，粘贴为图片（可以直接粘在表格里，也可粘在画图、ps这类工具里） excel插入word excel转pdf PPT常用操作动画（快闪的制作） 页面切换 导出为pdf 导出为图片（甚至可以做一些海报） PR入门PR软件的基本布局 新建/打开 项目 认识几种轨道 导入视频、音频、图片等素材 使用剃刀工具实现视频的简单剪切 音频的添加和编辑 使用关键帧实现对象的运动效果 导出视频 在B站找视频资源 Markdown熟悉集中简单的格式标记方法 学会使用Typora这类的编辑工具 将markdown导出为图片、pdf等 意识到markdown是写博客以及GitHub上readme文件的优秀选择 用Markdown写笔记小率很高 GitHubGitHub是一个全球最大的开源社区 我们可以用GitHub来进行学习菌资料的高效整理 GitHub Pages是一个极佳的建造学习部主页的地方 大家可以在GitHub上边找到很多优秀的开源库和学习资料也可以看到当下的技术趋势等 希望大家可以抽空时间利用GitHub的官方教程学习GitHub和Git的一些基本操作（如建立新仓库、clone、fork、pull request、从本地上传项目、和他人合作完成一个开源项目等） 如果大家可以建立自己的开源库的话就更好的 PS基本入门PS软件的基本布局 几个基本的工具 图层的概念以及图层的操作 图形比例的设置 海报打印的几个注意点（如海报尺寸，格式等） 在B站可以找到很多教程，可以用来进行更深入的学习 常用工具下载以及比较重要的网站GithubTypora 以下几个资源来自微信公众号：小白自习室（建议关注一下，此处软件资源极其丰富） Adobe Acrobat(PDF编辑神器)安装教程百度网盘直接下载Adobe全家桶（包含PS,PR等）百度网盘直接下载矿大提供的正版Office以及Windows等 几个工作规范 发布的文件尽量用pdf格式（接收文件者有特殊需求或有明确的格式要求等特殊情况下除外） 制作的表格一定要让阅读者一目了然，看起来规整、严谨，在表头加标题和表格内容说明 内容较多的文档最好加上目录、页码、页眉或页脚 文档一定要风格统一，同一类型的文本字体、字号等需要统一 写在最后 希望大家将自己感兴趣的或者是觉得有必要看看的地方多倒腾倒腾 不一定非要把每个软件都学得很精通，但我至少希望大家在使用每一项工具遇到麻烦的时候可以不慌不忙的根据自己的经验或是在网上找到的资源从容地解决它们。（当大家见得多了之后，总会有一种直觉告诉你某某问题可能可以通过某种方式解决，然后你就可以去尝试尝试啦） 我希望通过这样一次活动，学习部的每一位同学身上都能散发出一种“极客气质”，即敢于探索未知领域，对各种技术有着狂热的兴趣。 当然，最直接的，我希望以后学习部发布的各种文件都可以被编辑成其他人羡慕的样子。 另外呢，希望大家形成记笔记和写博客的习惯，在大学学习的过程中，不管是学课内的还是课外的，内容都是极多、极散的，记笔记可以帮大家加深印象，也更容易一次又一次地找回自己丢失的记忆。，写博客有利于大家将自己的的知识系统化，加深理解，当然也可以享受那种自己的文章给别人带来帮助的成就感。 我推荐的几个笔记本有：windows自带的OneNote（最大的问题是同步太慢，另外不支持markdown）、印象笔记、有道云笔记，大家可以试试，看看哪个更合自己的胃口 我推荐的几个博客平台：博客园、GitHub Pages、简书、CSDN（如果不介意铺天盖地的广告的话 中矿大计算机学院学生会学习部 魏敬杨 2019年12月8日","permalink":"wjywjy61.github.io/2019/12/09/2019%E5%B9%B4%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E9%99%A2%E5%AD%A6%E7%94%9F%E4%BC%9A%E5%AD%A6%E4%B9%A0%E9%83%A8%E5%8A%9E%E5%85%AC%E5%9F%B9%E8%AE%AD%E4%BC%9A%E6%80%BB%E7%BB%93/","photos":[]},{"tags":[{"name":"flask","slug":"flask","permalink":"wjywjy61.github.io/tags/flask/"}],"title":"【Flask_tips3】数据库","date":"2019/12/06","text":"数据库写在前面一款不错的SQL模型绘制工具安装位置D:\\Program Files\\wwwsqldesigner 打开方式在安装位置使用Nodejs的一个命令http-server（应该算是安装的一个插件吧） 使用方式几乎完全不会 SQLAlchemy(炼金术)介绍 [ˈælkəmi] SQLAlchemy不只是某一款数据库软件的ORM，而是支持包含MySQL、PostgreSQL和SQLite在内的很多数据库软件。简直是太强大了，你可以在开发的时候使用简单易用且无需另起服务的SQLite，需要部署应用到生产服务器上时，则选用更健壮的MySQL或PostgreSQL服务，并且不需要修改应用代码（译者注：只需修改应用配置）。 Migrate(迁移)简介[maɪˈɡreɪt] 这个插件是Alembic的一个Flask封装，是SQLAlchemy的一个数据库迁移框架。 使用数据库迁移增加了启动数据库时候的一些工作，但这对将来的数据库结构稳健变更来说，是一个很小的代价。 一些数据库术语ORM对象关系映射（Object Relational Mapping，简称ORM）是通过使用描述对象和数据库之间映射的元数据，将面向对象语言程序中的对象自动持久化到关系数据库中。 VARCHAR数据库中的可变长度的字符串 Flask-SQLAlchemy配置新的config.py1import os2basedir = os.path.abspath(os.path.dirname(__file__))34class Config(object):5 # ...6 SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \\7 'sqlite:///' + os.path.join(basedir, 'app.db')8 SQLALCHEMY_TRACK_MODIFICATIONS = False SQLALCHEMY_DATABASE_URIFlask-SQLAlchemy插件从SQLALCHEMY_DATABASE_URI配置变量中获取应用的数据库的位置。 SQLALCHEMY_TRACK_MODIFICATIONS用于设置数据发生变更之后是否发送信号给应用，我不需要这项功能，因此将其设置为False。 初始化数据库和数据库迁移引擎1db = SQLAlchemy(app)2migrate = Migrate(app, db) 数据库模型一张样例图 样例解析id、主键id字段通常存在于所有模型并用作主键。每个用户都会被数据库分配一个id值，并存储到这个字段中。大多数情况下，主键都是数据库自动赋值的，我只需要提供id字段作为主键即可。 VARCHARusername，email和password_hash字段被定义为字符串（数据库术语中的VARCHAR），并指定其最大长度，以便数据库可以优化空间使用率。 password_hash不使用明文密码，而使用哈希密码，提高安全性 样例的代码实现1from app import db23class User(db.Model):4 id = db.Column(db.Integer, primary_key=True)5 username = db.Column(db.String(64), index=True, unique=True)6 email = db.Column(db.String(120), index=True, unique=True)7 password_hash = db.Column(db.String(128))89 def __repr__(self):10 return '&lt;User &#123;&#125;&gt;'.format(self.username) 代码解析User类、db.Model上面创建的User类继承自db.Model，它是Flask-SQLAlchemy中所有模型的基类。 这个类将表的字段定义为类属性，字段被创建为db.Column类的实例，它传入字段类型以及其他可选参数，例如，可选参数中允许指示哪些字段是唯一的并且是可索引的，这对高效的数据检索十分重要。 __repr__方法该类的__repr__方法用于在调试时打印用户实例。 创建数据库迁移数据库命令flask db init flask db 是Flask-Migrate添加的用来管理和迁移数据库的相关事情的子命令 关于flask命令的注意点flask 命令依赖于 FLASK_APP 环境变量来知道Flask应用入口在哪里。 可以在终端上用 set FLASK_APP=microblog.py 来配置 第一次数据迁移生成迁移脚本flask db migrate -m”user table” 效果生成了一个迁移脚本，位于microblog/migration/versions/eb69….py（文件名为用于迁移的唯一标识） 内部包含upgrade()和dowmgrade()两个函数 更改升级的应用到数据库flask db upgrade 效果当upgrade命令检测到SQLite不存在时，会创建一个app.db，即SQLite数据库 在使用类似MySQL和PostgreSQL的 数据库服务时，必须在运行 upgrade 之前在数据库服务器上创建数据库。 数据库升级和降级流程通过数据库迁移机制的支持，在你修改应用中的模型之后，将生成一个新的迁移脚本（ flask db migrate ），你可能会审查它以确保自动生成的正确性，然后将更改应用到你的开发数据库（ flask db upgrade ）。 测试无误后，将迁移脚本添加到源代码管理并提交。 当准备将新版本的应用发布到生产服务器时，你只需要获取包含新增迁移脚本的更新版本的应用，然 后运行 flask db upgrade 即可。 Alembic将检测到生产数据库未更新到最新版本，并运行在上一版 本之后创建的所有新增迁移脚本。 ​ flask db downgrade 命令可以回滚上次的迁移。","permalink":"wjywjy61.github.io/2019/12/06/%E3%80%90Flask-tips3%E3%80%91%E6%95%B0%E6%8D%AE%E5%BA%93/","photos":[]},{"tags":[],"title":"在PyCharm中遇到pip失效时的解决方案以及其他发现","date":"2019/10/03","text":"在PyCharm中遇到pip失效时的解决方案以及其他发现在这篇文章里，我简单地叙述了我在使用PyCharm创建一个flask项目时遇到的问题，以及我解决这个问题的过程。其中比较值得注意的点有：①PyCharm创建新项目时的解释器配置②Python虚拟环境的创建等。 一、一些名词解释，希望能够帮助大家理解我所想表达的东西：①PyCharm：JetBrains公司出品的一款Python集成开发环境，是用于Python Web开发最好用的开发工具（似乎不用加“之一”）。一个好消息是，使用教育邮箱（类似xxx@cumt.edu.cn之类的由高校分配的邮箱）可以在JetBrains官网上申请到专业版的授权。 ②pip：这是目前最好用的python第三方库安装工具，只需要一行代码便能为python安装一个库。 ③虚拟环境：这是为了防止破坏或搞乱全局python解释器而创建的一个包含Python解释器的python开发和调试环境，在这个环境中进行新库的安装不会影响到全局解释器中的python库。 ④flask：一个很受欢迎的python web开发框架。 二、问题描述在pyCharm中创建flask项目时，在建立好虚拟环境，开始自动用pip工具安装flask的时候，软件提示：Install flask failed。如图所示： 在PyCharm中创建项目时自动安装flask时的失败提示 我的PyCharm 版本为2019.2.3专业版（这就是用教育邮箱白嫖的，感谢JetBrains）。 并且，我在我常用的Python的全局解释器中从没遇到过pip失效的问题！ 三、解决㈠【失败一（可以直接跳过）】按照错误提示中的”Proposed solution”来试了试①打开PyCharm中的终端，用 cd 命令进入到 项目文件夹\\venv\\Scripts 中，打开activate.bat 文件。手动激活PyCharm为这个项目配置的虚拟环境。 ②试试 pip install flask ,结果如下图所示，其实和之前的错误提示一摸一样。 在PyCharm中的终端手动使用pip时的失败提示 ③再试试用pip安装一下其他的东西，结果和上一步一样 ④再试试用PyCharm创建一个Django项目，结果在自动使用 pip install django 时，出现了第二步同样的问题。 ⑤可以初步得出结论：在这个虚拟环境中，pip失效了！至于为什么失效，错误提示中写的是：pip配置了需要tls/ssl的位置，但是python中的ssl模块不可用。说实话，我不太明白。 ㈡【成功解决】在创建新项目时选择一下解释器是基于谁创建的由于目前实在是不懂ssl这些，又感觉网上一些博客里边谈的东西太玄乎，我就想着直接干脆一点，把PyCharm创建的虚拟环境给换掉试试。 当我再次尝试创建一个新的flask项目时，我多留意了一下创建时可选的一些配置，my god，我感到有些崩溃，原来~PyCharm创建的这个虚拟环境默认是根据我暂时没怎么用的anaconda中的来的。 PyCharm中新建项目时的配置信息 当我把 Based Interpreter 改为我的常用Python解释器（从python官网安装）的时候，项目便创建成功了，啥问题也没发生！ 常常，人们在迷迷糊糊的时候感到肚子有点不舒服，一心忙着寻医问药，而不知道原来是自己忘记了而肚子饿了。 四、总结①我成功的解决了我当下的问题，对于anaconda中的python解释器的毛病我是真的一窍不通，不过，好在目前我也没必要去了解得那么细。 ②当用Python用得多了的时候，系统里很容易存在多个python解释器，这时候自己很容易被搞糊涂。我的建议是：在系统的环境变量中只配置自己最常用的那一个解释器所在的目录，并将其作为一个全局解释器，在其他地方需要单独的python解释器的时候，使用虚拟环境（可以用vitutual或pypenv等工具手动创建，也可以用PyCharn这类集成开发环境在创建项目时自动创建，不过不管是在哪里创建，都一定得注意要基于一个可靠的Python解释器创建！）。 ③在PyCharm的新项目创建时，是可以对本项目即将使用的解释器进行配置的，可以选择：⑴新建虚拟环境的python解释器的存放位置 ⑵基于哪个解释器来新建虚拟环境的python解释器 ⑶使用已经存在的虚拟环境的解释器 ……","permalink":"wjywjy61.github.io/2019/10/03/%E5%9C%A8PyCharm%E4%B8%AD%E9%81%87%E5%88%B0pip%E5%A4%B1%E6%95%88%E6%97%B6%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%BB%A5%E5%8F%8A%E5%85%B6%E4%BB%96%E5%8F%91%E7%8E%B0/","photos":[]},{"tags":[{"name":"C/C++","slug":"C-C","permalink":"wjywjy61.github.io/tags/C-C/"}],"title":"C/C++中变量的作用域和存储类型简介","date":"2019/06/07","text":"C/C++中变量的作用域和存储类型简介写在开头对于很多C/C++的初学者来说，很容易理不清变量的作用域和存储类型这一块的一些概念，也容易将其中的一些概念搞混淆。作为一个C/C++的初学者，笔者希望在这里能够尝试着去理一理这些较为繁杂的概念，主要当作自己备忘之用。当然，由于笔者水平有限，经验不足，在这里也只能罗列一些常用概念和使用方法，且可能会有些许不专业之处，望君理解并指正。 一定要把变量的作用域和存储类型分开来看很多人很容易把变量的作用于和存储类型搞混，但其实只要我们从它们定义出发来看，这个问题是很容易解决的。作用域是一个变量能够被使用的范围，而存储类型则是变量的存储方式，且存储类型决定着变量的生存期。 通俗地讲，存储类型决定着一个变量在某位置存不存在，而作用域决定着一个变量在某位置能不能被使用。比如： 11 /*例1*/22 #include&lt;stdio.h&gt;33 int main()44 &#123;55 static int a=1;//定义了一个静态存储的局部变量66 return 0;77 &#125; a是一个采用静态存储的局部变量，像这样的变量在整个文件中都不会消失，但是只能在main()函数内被使用。 作用域类型在C语言中有块作用域、函数作用域、函数原型作用域，以及文件作用域，在C++中还有类作用域和命名空间作用域。由于在各类资料中关于这几类作用域的介绍已经相当丰富，在此我就不展开介绍了。在这几类作用域中，除了函数作用域均可根据名称来理解，如“具有块作用域”就是说明该变量在对应代码块（一般来说就是大括号里包起来的部分，可以省略大括号的for语句、if()语句等除外）中能够被使用。 函数作用域仅用于goto语句的标签，由于goto语句已经用得很少，在此笔者不再对函数作用域进行展开介绍。 存储类型存储类型分为静态存储和动态存储，采用静态存储方式的变量一旦创建，其存储空间在整个程序的运行过程中都不会被释放。对于采用动态存储的变量来说，当进入该程序块（函数或复合语句等）时，建立该变量，分配存储空间，当退出该程序块时，撤销该变量，释放其存储空间。 在接下来的一部分内容里，笔者将按照不同的限定词来对各种常见情况进行分别描述。 不用限定词的情况11 /*例2，不用限定词的情况*/22 #include&lt;stdio.h&gt;33 int a=1;//a为全局变量，采用静态存储44 int main()55 &#123;66 int b=1;//b为局部变量，默认采用动态存储77 return 0;88 &#125; 全局变量a采用静态方式存储，具有文件作用域，b采用动态方式存储，具有的是块作用域。 使用static11 /*例3*/22 #include&lt;stdio.h&gt;33 static int a=1;44 int main()55 &#123;66 static int b=1;77 return 0;88 &#125; 在程序块外使用static来定义变量 如例3中的变量a。 对于全局变量来说，加不加static,该变量都采取静态方式来存储，但是加了static之后，该变量便变成了“内部变量”，即该变量只能在该文件内被使用。不加static的全局变量默认为“外部变量”，可以被其他文件在进行了引用申明（用extern,稍后介绍）后使用。 在程序块内使用static来定义变量如例3中的变量b。 对于定义局部变量来说，如果不加任何修饰词，则该变量默认为自动变量，采取动态方式进行存储。在用static进行修饰的变量定义中，该变量将采取静态方式进行存储，而且其初始化在编译时进行，且只会进行一次。 但是，不管加不加static，在程序块内定义的变量都只具有块作用域。 使用extern1 1 /*例4 part 1*/2 2 /*file 1.c*/3 3 #include&lt;stdio.h&gt;4 4 int a=1;5 5 static int b=1;6 6 int main()7 7 &#123;8 8 extern int c;//对于全局变量c做提前引用说明9 9 printf(\"%d\",c);1010 return 0;1111 &#125;1212 int c=1;13 1 /*例4，part 2*/14 2 /*file 2.c*/15 3 #include&lt;stdio.h&gt;16 4 extern int a;//对全局变量a做引用申明17 5 extern int b;//本行错误，因为b仅在file 1.c中有效18 6 int main()19 7 &#123;20 8 printf(\"%d\",a);21 9 return 0;2210 &#125; extern仅用于对全局变量进行引用声明，其中包括对在定义在使用处后边的全局变量做提前引用声明（如例4 part 1 第8行），也包括在一个文件中对另一个文件里定义的全局外部变量做引用声明（如例4 part 2 第4行）。 使用auto、register使用auto可显示地声明自动变量，由于在程序块内声明的变量默认是auto的，所以auto更多地也就只是起到一个标记的作用了。 使用register可以将一些将被频繁使用的局部变量放到寄存器中，这样可以提高程序执行的效率。","permalink":"wjywjy61.github.io/2019/06/07/C-C-%E4%B8%AD%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%AD%98%E5%82%A8%E7%B1%BB%E5%9E%8B%E7%AE%80%E4%BB%8B/","photos":[]}]}